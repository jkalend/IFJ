# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  codecov: codecov/codecov@3.2.3

parameters:
  codecov_token:
    type: string
    default: "08f6afd7-6b12-41b3-8922-a06b44826d96"

commands:
  prepare_env:
    steps:
      - run:
          name: "Install cmake"
          command: |
            sudo apt-get update
            sudo apt-get install -y cmake

      - run:
          name: "Install lcov"
          command: |
            sudo apt-get update
            sudo apt-get install -y lcov

  coverage:
    parameters:
      flags:
        type: string
        default: ""
    steps:
      - codecov/upload:
          flags: << parameters.flags >>

jobs:
  cppcheck:
    docker:
      - image: cimg/base:stable
    resource_class: small
    steps:
      - checkout
      - prepare_env
      - run:
          name: "Install cppcheck"
          command: |
            sudo apt-get update
            sudo apt-get install -y cppcheck
      - run:
          name: "Run cppcheck"
          command: "cppcheck --error-exitcode=1 src"

  stack_test_cmake:
    docker:
      - image: cimg/base:stable
    environment:
      CODECOV_TOKEN: << pipeline.parameters.codecov_token >>
    parameters:
      flags:
        type: string
        default: "stack"
    resource_class: small
    steps:
      - checkout
      - prepare_env
      - run:
          name: "Compile"
          command: "cmake -B build -S . && cmake --build build --target test_stack"
      - run:
          name: "Run tests"
          command: "cd build && ctest -C Debug -T test -R stack_test"
      - run:
          name: "Get Coverage"
          command: |
            lcov --directory . --capture --output-file coverage.info
            lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' --output-file coverage.info
            lcov --list coverage.info
      - coverage:
          flags: << parameters.flags >>

  scanner_test_granular_cmake:
    docker:
      - image: cimg/base:stable
    environment:
      CODECOV_TOKEN: << pipeline.parameters.codecov_token >>
    steps:
      - checkout
      - prepare_env
      - run:
          name: "Compile"
          command: "cmake -B build -S . && cmake --build build"
      - run:
          name: "Run tests"
          command: |
              cd build
              ctest -C Debug -T test -R lexer -E all
              lcov --directory . --capture --output-file coverage.info
              lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' --output-file coverage.info
              lcov --list coverage.info

      - run:
            name: "Get Coverage"
            command: |
              lcov --directory . --capture --output-file coverage.info
              lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' --output-file coverage.info
              lcov --list coverage.info
      - coverage:
            flags: "scanner"

  all_scanner_tests_cmake:
    docker:
      - image: cimg/base:stable
    environment:
      CODECOV_TOKEN: << pipeline.parameters.codecov_token >>
    parameters:
      flags:
        type: string
        default: "scanner"
    steps:
      - checkout
      - prepare_env
      - run:
          name: "Compile"
          command: "cmake -B build -S . && cmake --build build"
      - run:
          name: "Run tests"
          command: "cd build && ctest -C Debug -T test -R all_tests_lexer"
      - run:
          name: "Get Coverage"
          command: |
            lcov --directory . --capture --output-file coverage.info
            lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' --output-file coverage.info
            lcov --list coverage.info
      - coverage:
          flags: << parameters.flags >>

  ifj-22tester:
    docker:
      - image: cimg/base:stable
    environment:
      CODECOV_TOKEN: << pipeline.parameters.codecov_token >>
    parameters:
      flags:
        type: string
        default: "total"
    steps:
      - checkout
      - prepare_env
      - run:
          name: "Compile"
          command: "cmake -B build -S . && cmake --build build"
      - run:
          name: "Get tests"
          command: "git clone https://github.com/galloj/IFJ22_Tester.git"
      - run:
          name: "Run tests"
          command: "cd IFJ22_Tester && python3 test.py ../build/IFJ ../ic22int"
          # command: "cd build && ctest -C Debug -T test -R IFJ"
      - run:
          name: "Get Coverage"
          command: |
            lcov --directory . --capture --output-file coverage.info
            lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' --output-file coverage.info
            lcov --list coverage.info
      - coverage:
          flags: << parameters.flags >>


workflows:
  Static Analysis:
    jobs:
      - cppcheck
  Tests:
    jobs:
      - ifj-22tester
#   Tests:
#     jobs:
#       - stack_test_cmake
#       - scanner_test_granular_cmake
#       - all_scanner_tests_cmake
#   Overall:
#     triggers:
#       - schedule:
#           cron: "0 0 0/6 ? * * *"
#           filters:
#             branches:
#               only:
#                 - in_while_hell
#     jobs:
#       - ifj-22tester
